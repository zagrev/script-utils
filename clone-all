#!/usr/bin/env bash
set -e

GIT_SERVER_URL=${GIT_SERVER_URL:-https://gitlab.scitec.com}
GIT_GROUP=${GIT_GROUP:-MDPAP}
GIT_PW=${GIT_PW:-$(<~/secrets/gitlab-token)}
GIT_OPTS=
GIT_MIRROR=

DEST_DIR=${DEST_DIR:-.}
PROJECT_MATCH_REGEX="${PROJECT_MATCH_REGEX:-*}"
SKIP_EXISTING=N

COLOR_SUCCESS="\e[1;32m"
COLOR_WARN="\e[33m"
COLOR_ERROR="\e[31m"
COLOR_RESET="\e[m"

LOG=/tmp/clone-all-$(id -un)-$(date +%Y-%m-%d-%H-%M-%S).log

verbosity=${VERBOSITY:-1}

########################################
#
#  process any command line arguments
#
########################################
function dump_config
{
  echo -e "
${COLOR_WARN}Configuration

  GIT_SERVER_URL      = ${GIT_SERVER_URL}
  GIT_GROUP           = ${GIT_GROUP}
  GIT_PW              = ${GIT_PW//?/*}

  DEST_DIR            = ${DEST_DIR}
  PROJECT_MATCH_REGEX = ${PROJECT_MATCH_REGEX}

${COLOR_RESET}"

}

########################################
#
#  process any command line arguments
#
########################################
function usage
{
  echo "Usage: $(basename ${BASH_SOURCE[0]})
   --verbose, -v    increase the program logging"
  echo "   --dump-config    show the configuration and exit"
  echo "   --server         the location of the git server. Defaults to \"${GIT_SERVER_URL}\""
  echo "   --group          the group to start, recursing through all the sub-groups and projects. Defaults to \"${GIT_GROUP}\""
  echo "   --projects       a globbing expression to get/update only matching projects"
  echo "   --git-creds      the git credentials for the API. Defaults to the contents of \"~/secrets/gitlab-token\""
  echo "   --skip-existing  skips any project that already exists"
  echo "   --destination    the directory to receive the checked-out projects. Defaults to \".\""
  echo "   --help, -h, -?   Print this message"
}

########################################
#
#  process any command line arguments
#
########################################
function process_args
{
  local should_exit=0
  local should_dump_config=0

  while [[ $# -gt 0 ]]
  do
    case "$1" in

      -v|--verbose)
        (( verbosity += 1 ))
        ;;

      --server)
        GIT_SERVER_URL="$2"
        shift
        ;;

      --group)
        GIT_GROUP="$2"
        shift
        ;;

      --git-creds)
        GIT_PW="$2"
        shift
        ;;

      --destination)
        DEST_DIR="$2"
        shift
        ;;

      --mirror)
        GIT_MIRROR="--bare"
        ;;

      --gitopts)
        GIT_OPTS="$2"
        shift
        ;;

      --help|-h|-?)
        usage
        should_exit=1
        ;;

      --dump-config)
        should_dump_config=1
        should_exit=1
        ;;

      --projects)
        PROJECT_MATCH_REGEX="$2"
        shift
        ;;

      --skip-existing)
        SKIP_EXISTING=Y
        ;;

      *)
        echo -e "${COLOR_ERROR}Unknown parameter: \"$1\"${COLOR_RESET}"
        should_exit=1
        ;;
    esac
    shift
  done

  [[ $should_dump_config == 1 ]] && dump_config
  [[ $should_exit == 1 ]] &&  exit 0

  return 0
}

########################################
#
#  process a project
#  clone if not there or cd in and pull
#
########################################
function process_project
{
  local project_json="$1"
  local indent="$2"

  local project_id=$(       jq -r '.id'                <<< "${project_json}")
  local project_name=$(     jq -r '.name'              <<< "${project_json}")
  local project_slug=$(     jq -r '.path'              <<< "${project_json}")
  local project_url=$(      jq -r '.ssh_url_to_repo'   <<< "${project_json}")
  local project_branch=$(   jq -r '.default_branch'    <<< "${project_json}")
  local project_archived=$( jq -r '.archived'          <<< "${project_json}")

  #echo project_id=${project_id}
  #echo project_name=${project_name}
  #echo project_slug=${project_slug}
  #echo project_url=${project_url}
  #echo project_branch=${project_branch}
  #echo project_archived=${project_archived}

  if [[ ${project_archived} != true ]]
  then

    echo -e "${COLOR_SUCCESS}${indent}Processing project \"${project_name}\" (${project_id})...${COLOR_RESET}"
    indent="${indent}  "

    if [[ -d "${project_slug}" && ${SKIP_EXISTING} != "Y" ]]
    then
      echo -en "${COLOR_SUCCESS}${indent}Pulling into ${project_branch}...${COLOR_RESET}"
      (
        cd "${project_slug}"

        # if we cloned an empty repo, we can't do any git things
        # so we check is any files exist besides "." and ".."
        if [[ -z "$GIT_MIRROR" && $(ls -a | grep -v "\.git" | wc -l) -gt 2 ]]
        then
          old_branch=$(git branch --show-current)

          if ! git checkout "${project_branch}" &>> ${LOG}
          then
            echo -en "${COLOR_WARN} stashing changes...${COLOR_RESET}"
            git stash
            git checkout "${project_branch}" &>> ${LOG}
          fi

          if ! git pull &>> ${LOG}
          then
            echo -en "${COLOR_WARN} stashing changes...${COLOR_RESET}"
            git stash
            git pull &>> ${LOG}
          fi

          git checkout "${old_branch}" &>> ${LOG}

        else
          echo -en "${COLOR_WARN}No files found, skipping ${COLOR_RESET}"
        fi
      )
      echo -e "${COLOR_SUCCESS}done${COLOR_RESET}"
    elif [[ ! -d "${project_slug}" ]]
    then
      echo -en "${COLOR_SUCCESS}${indent}Cloning into ${project_slug}...${COLOR_RESET}"
      if git clone ${GIT_OPTS} ${GIT_MIRROR} "${project_url}" &>> ${LOG}
      then
        echo -e "${COLOR_SUCCESS}done${COLOR_RESET}"
      else
        echo -e "${COLOR_ERROR}Cannot clone \"${project_name}\"${COLOR_RESET}"
      fi
    fi

  fi
}

########################################
#
#  process a group
#  iterate over all the projects and clone/update them
#  iterate over all the sub-groups and repeat
#
########################################
function process_group
{
  local group_json="$1"
  local indent="$2"

  group_id=$(   jq -r '.id'   <<< "${group_json}")
  group_name=$( jq -r '.name' <<< "${group_json}")
  group_slug=$( jq -r '.path' <<< "${group_json}")

  echo -e "${COLOR_SUCCESS}${indent}Processing group \"${group_name}\" (${group_id})...${COLOR_RESET}"

  mkdir -p "${group_slug}"

  # ok, do all this work in a sub-shell, so we don't lose our PWD
  (
    cd "${group_slug}"
    local projects=

    # get all the projects (handle pagination)
    echo -e "${COLOR_SUCCESS}Getting the list of projects for \"${group_name}\"${COLOR_RESET}"
    local project_list=$(curl -sSfLI --header "PRIVATE-TOKEN: ${GIT_PW}" \
                    "${git_api}/groups/${group_id}/projects?per_page=100&page=1&order_by=name")
    local last_page=$(grep -i "x-total-pages" <<< "${project_list}" | sed -r -e 's/^[^:]+: //g' | tr -d '\r')
    local cur_page=1

    while [[ "${cur_page}" -le "${last_page}" ]]
    do
      echo -e "${COLOR_SUCCESS}Getting page ${cur_page} of ${last_page} of project info${COLOR_RESET}"
      project_list=$(curl -sSfL --header "PRIVATE-TOKEN: ${GIT_PW}" \
                    "${git_api}/groups/${group_id}/projects?per_page=100&page=${cur_page}&order_by=name&sort=asc")
      projects="${projects}$(jq -c '.[]' <<< "${project_list}")"
      ((cur_page += 1))
    done

    # now check out each project
    local regex="${PROJECT_MATCH_REGEX,,}"
    while read -r project
    do
      if [[ -n $(echo "${project}" | sed -e 's/^[ \t]+//' -e 's/[ \t]+$//') ]]
      then
        local project_name=$( jq -r '.name' <<< "${project}")
        if [[ ${project_name,,} == ${regex} ]]
        then
          process_project "${project}" "  "
        fi
      fi
    done <<< "${projects}"
  )

}


########################################
#
#  Start program
#
########################################

process_args "$@"
if [[ $verbosity -gt 1 ]]
then
  dump_config
fi

git_api="${GIT_SERVER_URL}/api/v4"

# the the info about the starting group
echo -e "${COLOR_SUCCESS}Getting information about group \"${GIT_GROUP}\"..."
group=$(curl -sSfL --header "PRIVATE-TOKEN: ${GIT_PW}"  "${git_api}/groups/${GIT_GROUP}?order_by=name" | jq '.')

# tell the user it worked, then get the slug and id
if [[ -n "${group}" ]]
then
  echo -e "${COLOR_SUCCESS}Found group \"${GIT_GROUP}\"${COLOR_RESET}"
else
  echo -e "${COLOR_ERROR}Group \"${GIT_GROUP}\" not found${COLOR_RESET}" >&2
  exit 1
fi

(
  cd "${DEST_DIR}"
  process_group "${group}" ""
)


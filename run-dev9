#!/usr/bin/env bash
set -e

SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
PREFIX=${PREFIX:-srb}
IMAGE=dev/${PREFIX}-build
CONTAINER_NAME=${PREFIX}-dev

# Variables Set via commandline flags ( -d,--daemon and -r,--refresh)
INTERACTIVE_MODE=true
REFRESH_CONTAINERS=false

while getopts "drv" opt; do
  case $opt in
    d)
      INTERACTIVE_MODE=false
      ;;
    r)
      REFRESH_CONTAINERS=true
      ;;
    -)
      case "${OPTARG}" in
        daemon)
          INTERACTIVE_MODE=false
          ;;
        refresh)
          REFRESH_CONTAINERS=true
          ;;
      esac
      ;;
    v)
      VERBOSE=true
      ;;
    *)
        INTERACTIVE_MODE=false
        ;;
  esac
done

# Helper Function: Checks if an environment variable is true
is_true() {
  [[ -n "$1"  &&  "$1" != "false" &&  "$1" != "0" ]]
}

execIntoContainer() {
  [[ -n "$VERBOSE" ]] && echo "Attaching to Container: ${CONTAINER_NAME}"
  docker exec -it \
    --workdir "${PWD}" \
    --user "$(id -un):$(id -un)" \
    "${CONTAINER_NAME}" \
    bash
}

buildImage() {
  [[ -n "$VERBOSE" ]] && echo "Building Docker Image"
  docker build \
    -f "${SCRIPT_DIR}/Dockerfile-dev9" \
    --build-arg "HOME=${HOME}" \
    --build-arg "NAME=$(id -un)" \
    --build-arg "UID=$(id -u)" \
    --build-arg "GID=$(id -g)" \
    --secret "id=artifactory_username,src=${HOME}/secrets/arti-user" \
    --secret "id=artifactory_token,src=${HOME}/secrets/arti-token" \
    -t "${IMAGE}" "${SCRIPT_DIR}"
}

# Run a container interactively or, if as a daemon, attaches to the container
# with a docker exec session
runContainer() {
  local mode=""

  if is_true $INTERACTIVE_MODE; then
    [[ -n "$VERBOSE" ]] && echo "Running Container in Interactive Mode"  
    mode="-it"
  else
    [[ -n "$VERBOSE" ]] && echo "Running Container in Daemon Mode"
  fi

  XSOCK=/tmp/.X11-unix
  XAUTH=/tmp/.docker.xauth
  [[ -n "${DISPLAY}" ]] && xauth nlist "$DISPLAY" | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -

  docker run ${mode} --rm \
    --name "${CONTAINER_NAME}" \
    --hostname "${CONTAINER_NAME}" \
    --workdir "${PWD}" \
    --user "$(id -un):$(id -un)" \
    --group-add "wheel" \
    --group-add "docker" \
    --group-add "devs" \
    -v "/home:/home" \
    -v "/opt/scitec:/opt/scitec" \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -e "XAUTHORITY=$XAUTH" \
    -v "$XSOCK:$XSOCK" -v "$XAUTH:$XAUTH" \
    "${IMAGE}"

  [[ -z "$mode" ]] && execIntoContainer
set +x
}

# if container already exists
if docker ps --filter "name=${CONTAINER_NAME}" --format '{{.Names}}' -a | grep "${CONTAINER_NAME}" > /dev/null
then

  [[ -n "$VERBOSE" ]] && echo "Container ${CONTAINER_NAME} already exists"

  # if we want to refresh containers with latest images
  if is_true $REFRESH_CONTAINERS; then
  
    [[ -n "$VERBOSE" ]] && echo "Refreshing Containers"
    docker stop "$CONTAINER_NAME" > /dev/null
    docker rm "$CONTAINER_NAME" > /dev/null
    buildImage
    runContainer

  # if we simply want to exec into existing container
  else
    [[ -n "$VERBOSE" ]] && echo "Reusing existing container"
    execIntoContainer
  fi

# if container doesn't exist
else
  [[ -n "$VERBOSE" ]] && echo "Container ${CONTAINER_NAME} does not exist"
  buildImage
  runContainer
fi
